---
  - name: Validate if the provided prefix input is in correct network / prefix notation
    assert:
      that:
        - ipam_prefix_in_cidr | ipaddr('network') is defined
        - ipam_prefix_in_cidr | ipaddr('prefix') < 32
      success_msg: |
        "ipam_prefix_in_cidr input validation passed:
         - Provided value is: {{  ipam_prefix_in_cidr  }}
         - Network address is: {{  ipam_prefix_in_cidr | ipaddr('network')  }}
         - Prefix length is: {{  ipam_prefix_in_cidr | ipaddr('prefix')  }}"
      fail_msg: "The provided ipam_prefix_in_cidr: \"{{  ipam_prefix_in_cidr  }}\" is not provided in proper CIDR notation: network / prefix (prefix cannot be host i.e. 32). Ex: 10.0.0.0/24"

  - name: Retrieve prefixes listing from IPAM
    uri:
      url: "{{ ipam_url }}/api/ipam/prefixes/?limit={{ ipam_record_limit  }}&&status={{ ipam_prefix_reservation_status_value }}&&tenant_id={{  ipam_tenant_id  }}"
      method: GET
      headers:
        Content-Type: "application/json"
        Authorization: "Token {{ ipam_token }}"
      body_format: json
      return_content: yes
    register: prefix_list_output

  - name: Compute VRF aware subnet prefix ID from API output
    set_fact:
      ipam_prefix_id: "{{ (ipam_vrf_id != '') | ternary (prefix_list_output.json|json_query(\"results[?prefix=='\" + ipam_prefix_in_cidr + \"'&&vrf.id==`\" + ipam_vrf_id + \"`].id | [0]\"), prefix_list_output.json|json_query(\"results[?prefix=='\" + ipam_prefix_in_cidr + \"'&&vrf==`\" + ipam_prefix_vrf + \"`].id | [0]\")) }}"

  - name: Validate if IPAM prefix ID is defined
    assert:
      that:
        - ipam_prefix_id is defined
        - ipam_prefix_id != ""
      success_msg: "ipam_prefix_id validation passed and its value is: {{  ipam_prefix_id  }}"
      fail_msg: "The ipam_prefix_id is undefined OR equal to empty string. Please ensure the provided IPAM prefix in CIDR notation is correct and has been defined in IPAM accordingly"
  
  - name: Compute subnet prefix and prefix-length based on prefix address provided
    set_fact:
        ipam_prefix: "{{  ipam_prefix_in_cidr | ipaddr('network')  }}"
        ipam_prefix_length: "{{  ipam_prefix_in_cidr | ipaddr('prefix')  }}"

  - name: Retrieve the prefix available IP listing from IPAM
    uri:
      url: "{{ ipam_url }}/api/ipam/prefixes/{{ ipam_prefix_id }}/available-ips/?limit={{ ipam_record_limit  }}"
      method: GET
      headers:
        Content-Type: "application/json"
        Authorization: "Token {{ ipam_token }}"
      body_format: json
      return_content: yes
    register: available_ip_listing_output

  - name: Compute available IP with VRF awareness from API output
    set_fact:
        ipam_cidr_adress: "{{ (ipam_vrf_id != '') | ternary (available_ip_listing_output.json|json_query(\"[?vrf.id==`\" + ipam_vrf_id + \"`].address | [\" + host_index + \"]\"), available_ip_listing_output.json|json_query(\"[?vrf==`\" + ipam_prefix_vrf + \"`].address | [\" + host_index + \"]\")) }}"
    vars:
        host_group_name: "{{  (ansible_host_group_name == '' and group_names | length > 0) | ternary(group_names[0], ansible_host_group_name)  }}"
        host_index: "{{  (host_group_name != '') | ternary (groups[host_group_name].index(inventory_hostname), 0)  }}"

  - name: Validate if the computed available IP from IPAM is valid
    assert:
      that:
        - ipam_cidr_adress != ""
        - ipam_cidr_adress | ipaddr != False
      success_msg: "ipam_cidr_adress validation passed and its value is: {{  ipam_cidr_adress  }}"
      fail_msg: "The ipam_cidr_adress: \"{{  ipam_cidr_adress  }}\" is equal to empty string OR resolved to invalid format. Please ensure that the provided prefix has available IP addresses in the IPAM database"
  
  - name: Extract IP and network mask from the computed available IP
    set_fact:
        ipam_address: "{{ ipam_cidr_adress.split('/')[0] }}"
        ipam_address_network_mask: "{{ ipam_cidr_adress | ipaddr('netmask') }}"

  - name: Retrieve prefix gateway from IPAM
    uri:
      url: "{{ ipam_url }}/api/ipam/ip-addresses/?parent={{ ipam_prefix }}%2F{{ ipam_prefix_length }}&role={{ ipam_prefix_gateway_role_value }}"
      method: GET
      headers:
        Content-Type: "application/json"
        Authorization: "Token {{ ipam_token }}"
      body_format: json
      return_content: yes
    register: prefix_gateway_output

  - name: Compute prefix gateway with VRF awareness from API output
    set_fact:
        ipam_gateway_cidr_address: "{{ (ipam_vrf_id != '') | ternary (prefix_gateway_output.json|json_query(\"results[?vrf.id==`\" + ipam_vrf_id + \"`].address | [0]\"), prefix_gateway_output.json|json_query(\"results[?vrf==`\" + ipam_prefix_vrf + \"`].address | [0]\")) }}" 
  
  - name: Validate if the retrieved Gateway IP from IPAM is valid
    assert:
      that:
        - ipam_gateway_cidr_address != ""
        - ipam_gateway_cidr_address | ipaddr != False
      success_msg: "ipam_gateway_cidr_address validation passed and its value is: {{  ipam_gateway_cidr_address  }}"
      fail_msg: "The ipam_gateway_cidr_address: \"{{  ipam_gateway_cidr_address  }}\" is equal to empty string OR resolved to invalid format. Please ensure that the provided ipam_gateway_cidr_address is defined in IPAN record and assigned its corresponding ipam_prefix_gateway_role_label: \"{{  ipam_prefix_gateway_role_label  }}\" role accordingly"
  
  - name: Extract gateway address from the computed gateway prefix
    set_fact:
        ipam_gateway_address: "{{ ipam_gateway_cidr_address.split('/')[0] }}"

  - name: Reserve IP address in IPAM
    uri:
      url: "{{ ipam_url }}/api/ipam/ip-addresses/"
      method: POST
      headers:
        Content-Type: "application/json"
        Authorization: "Token {{ipam_token}}"
      body:
        address: "{{ ipam_cidr_adress }}"
        tenant: "{{ ipam_tenant_id }}"
        vrf: null
        status: "{{ ipam_ip_address_reservation_status_value }}"
        description: "Reserved for host: {{ vmware_hostname }} and its interface: {{  host_interface_name  }}"
      body_format: json
      return_content: yes
      status_code: 201
    register: ip_reservation_response
  
  - name: Store ID for IP reserved at IPAM
    set_fact:
        ipam_address_id: "{{ ip_reservation_response.json.id }}"
  
  - name: Validate if the reservation is done successfully
    assert:
      that:
        - ipam_address_id != ""
      success_msg: "ipam_address_id validation passed and its value is: {{  ipam_address_id  }}"
      fail_msg: "The ipam_address_id: \"{{  ipam_address_id  }}\" is equal to empty string. Please evaluate the ip_reservation_response: {{  ip_reservation_response  }} to find out possible cause of failure"

  - name: Update the IP reservation with VRF details
    uri:
      url: "{{ ipam_url }}/api/ipam/ip-addresses/{{ ipam_address_id }}/"
      method: PUT
      headers:
        Content-Type: "application/json"
        Authorization: "Token {{ipam_token}}"
      body:
        address: "{{ ipam_cidr_adress }}"
        vrf: "{{ ipam_vrf_id }}"
      body_format: json
      return_content: yes
      status_code: 200
    when: 
      - ipam_prefix_vrf != "null"